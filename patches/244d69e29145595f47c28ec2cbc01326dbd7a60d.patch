From 244d69e29145595f47c28ec2cbc01326dbd7a60d Mon Sep 17 00:00:00 2001
From: malte0811 <malte0811@web.de>
Date: Sun, 17 Jul 2016 17:14:27 +0200
Subject: [PATCH] fixed energy not being split across different outputs (#1235)

---
 .../common/blocks/metal/TileEntityConnectorLV.java | 35 +++++++++++++++++++---
 1 file changed, 31 insertions(+), 4 deletions(-)

diff --git a/src/main/java/blusunrize/immersiveengineering/common/blocks/metal/TileEntityConnectorLV.java b/src/main/java/blusunrize/immersiveengineering/common/blocks/metal/TileEntityConnectorLV.java
index 27ef4a3..a9d34c0 100644
--- a/src/main/java/blusunrize/immersiveengineering/common/blocks/metal/TileEntityConnectorLV.java
+++ b/src/main/java/blusunrize/immersiveengineering/common/blocks/metal/TileEntityConnectorLV.java
@@ -4,6 +4,7 @@
 
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.Set;
 
 import blusunrize.immersiveengineering.api.energy.IImmersiveConnectable;
@@ -239,7 +240,7 @@ public int transferEnergy(int energy, boolean simulate, final int energyType)
 				return 0;
 
 			int sum = 0;
-			HashMap<AbstractConnection,Integer> powerSorting = new HashMap<AbstractConnection,Integer>();
+			HashMap<AbstractConnection,Integer> powerSortingMax = new HashMap<AbstractConnection,Integer>();
 			for(AbstractConnection con : outputs)
 			{
 				IImmersiveConnectable end = toIIC(con.end, worldObj);
@@ -249,19 +250,44 @@ public int transferEnergy(int energy, boolean simulate, final int energyType)
 					int tempR = end.outputEnergy(atmOut, true, energyType);
 					if(tempR>0)
 					{
-						powerSorting.put(con, tempR);
+						powerSortingMax.put(con, tempR);
 						sum += tempR;
 					}
 				}
 			}
 
 			if(sum>0)
-				for(AbstractConnection con : powerSorting.keySet())
+			{
+				HashMap<AbstractConnection, Integer> outMap = new HashMap<>();
+				int outSum = 0;
+				for(AbstractConnection con : powerSortingMax.keySet())
+				{
+					float prio = powerSortingMax.get(con)/(float)sum;
+					int output = (int)(powerForSort*prio);
+					outSum += output;
+					outMap.put(con, output);
+				}
+				while (outSum<powerForSort)
+				{
+					Iterator<AbstractConnection> it = outMap.keySet().iterator();
+					while (outSum<powerForSort&&it.hasNext())
+					{
+						AbstractConnection curr = it.next();
+						int old = outMap.get(curr);
+						if (old<curr.cableType.getTransferRate())
+						{
+							outMap.put(curr, old+1);
+							outSum++;
+						}
+					}
+				}
+				for(AbstractConnection con : outMap.keySet())
+
 				{
 					IImmersiveConnectable end = toIIC(con.end, worldObj);
 					if(con.cableType!=null && end!=null)
 					{
-						int output = powerSorting.get(con);
+						int output = outMap.get(con);
 
 						int tempR = end.outputEnergy(Math.min(output, con.cableType.getTransferRate()), true, energyType);
 						int r = tempR;
@@ -296,6 +322,7 @@ public int transferEnergy(int energy, boolean simulate, final int energyType)
 							break;
 					}
 				}
+			}
 		}
 		return received;
 	}
